Here is a reminder of the DPLL rules, plus an idea on how to use them with BDDs:

Success: return SAT if:
        - M is a model for F

Unit: M := l :: M if:
      - We can find C \/ l in F
      - M is a model for !C
      - l is undefined in M

Decide: M := l@ :: M if:
        - l not in M
        - l or !l appears in F

Backtrack: M := !l :: M2 if:
           - C in F
           - M is a model for !C
           - M = M1 :: l@ :: M2
           - M1 doesn't contain any decision literal

Fail: return UNSAT if:
      - C in F
      - M is a model for !C
      - M doesn't contain any decision literal


Basically, we can use a BDD to check if M is a model of something. Why ? M does
not always contain each literal present in F, and BDD can show us some path from
which it is possible to atteign a result, not using every variables. In that
cas, it's easy to check Success or Fail if, using M, we can find a way to 0 or 1
for each C. To check for backtrack rule is also easy, since it is
almost the same as Fail. Unit is more tricky since we have to find a "l" in a
clause to add it in M. There are many solution and one using the two watched
literals technique, but using a BDD, if we use M and get stuck in a clause
because we don't have a variable to continue, we can extract it and add it to M
(with the value it should have in the clause).

Finally the backjump clause is the following:

Backjump: M := l' :: M2 if:
          - C in F
          - M is a model for !C
          - M = M1 :: l@ :: M2
          - F is a model for C' \/ l' (it is the backjump clause)
          - M2 is a model for !C
          - l' is undefined in M2
          - l or !l in F

It is more tricky and requires the use of a graph to find a backjump clause.

Backjump is the second step since it only replace backtrack to be more efficient.

If we add the theory, we now suppose that we can add or remove clauses using the
theory. For example, if we know a=b and b=c, then we can add a=c (if a=c or a<>c
is affected to a literal). Using union-find, it can be easily done (I think),
but this is a project for now.